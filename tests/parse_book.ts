import { createReadStream, writeFileSync } from "fs";
import rl from "readline";
import { Board, Move } from "../src/index.js";

const input = createReadStream("book.txt", "utf8");

const reader = rl.createInterface({ input });

const book: Record<string, number[]> = {};

for await (const line of reader) {
    const board = new Board().loadStartingPosition();

    const unparsed = line.split(" ").slice(0, -1); // trim off scoring

    const game: Move[] = [];

    for (const move of unparsed) {
        const parsed = Move.parseAlgebraicNotation(move, board);

        const key = board.zobristKey.toString();

        if (!(key in book)) book[key] = [];

        if (!book[key].includes(parsed.bits)) book[key].push(parsed.bits);

        board.makeMove(parsed);

        game.push(parsed);
    }
}

writeFileSync("src/book/book.ts", `\
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT DIRECTLY.

/**
 * this is the engine's opening book
 * autogenerated by tests/parse_book.ts
 */
const OpeningBook: Record<string, number[]> = {
${Object.entries(book).map(([zobristKey, moveValues]) => `    ["${zobristKey}"]: [${moveValues.join(", ")}],`).join("\n")}
};

export default OpeningBook;
`, "utf8");
